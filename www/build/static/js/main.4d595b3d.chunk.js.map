{"version":3,"sources":["components/logo.svg","components/Echo.js","components/Header.js","services/Echo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Echo","props","result","refreshInterval","nrRefresh","PASSWORD","PASSPHRASE","RADIX_APP","RADIX_COMPONENT","RADIX_ENVIRONMENT","HOSTNAME","HOSTPLATFORM","Header","className","src","logo","alt","href","target","rel","loadDataMock","Promise","resolve","loadDataFromApi","path","fetch","getFetchInit","then","json","myHeaders","Headers","append","method","headers","EchoService","useMockData","App","loadData","echoService","state","data","setState","echoResult","setInterval","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,kC,8LCqB5BC,EAnBF,SAACC,GAAW,IAErBC,EAEcD,EAFdC,OACAC,EACcF,EADdE,gBACAC,EAAcH,EAAdG,UAEF,OAAO,6BACL,yFAA+DD,EAA/D,kBACA,iDAAsB,2BAAIC,IAC1B,kDAAuB,2BAAIF,EAAOG,WAClC,oDAAyB,2BAAIH,EAAOI,aACpC,iDAAsB,2BAAIJ,EAAOK,YACjC,+CAAoB,2BAAIL,EAAOM,kBAC/B,iDAAsB,2BAAIN,EAAOO,oBACjC,+CAAoB,2BAAIP,EAAOQ,WAC/B,mDAAwB,2BAAIR,EAAOS,iB,gBCSxBC,EAvBA,WACb,OAAO,4BAAQC,UAAU,cACvB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,+DAGA,yBAAKH,UAAU,mBACf,6BADA,oFAGA,6BAHA,iEAMA,uBACEA,UAAU,WACVI,KAAK,gCACLC,OAAO,SACPC,IAAI,uBAJN,gBCJEC,EAAe,WACnB,OAAO,IAAIC,QAAQ,SAASC,GAWxBA,EAVa,CACX,UAAa,WACb,kBAAqB,QACrB,gBAAmB,OACnB,kBAAqB,cACrB,SAAW,cACX,aAAe,MACf,SAAW,kBACX,WAAa,yBAMfC,EAAkB,SAACC,GACvB,OAAOC,MAAMD,EAAME,KAAgBC,KAAK,SAAAzB,GAAU,OAAOA,EAAO0B,UAI5DF,EAAe,WACnB,IAAMG,EAAY,IAAIC,QAGtB,OAFAD,EAAUE,OAAO,SAAU,YAC3BF,EAAUE,OAAO,gBAAiB,YAC3B,CACLC,OAAQ,MACRC,QAASJ,IAIEK,EAzCK,SAACC,GACnB,IAAIV,EAAQF,EAIZ,OAHIY,IACFV,EAAQL,GAEH,CACLK,MAAOA,ICiCIW,G,kBAjCb,aAAe,IAAD,8BACZ,+CAeFC,SAAW,WACT,IAAMC,EAAcJ,EAAY,EAAKC,aAC/B/B,EAAY,EAAKmC,MAAMnC,UAAY,EAEzCkC,EAAYb,MAAM,aAAaE,KAAK,SAAAa,GAAI,OAAI,EAAKC,SAAS,CAAEC,WAAYF,EAAMpC,UAAWA,OAjBzF,EAAKD,gBAAkB,IACvB,EAAKgC,aAAc,EAEnB,EAAKI,MAAO,CACVG,WAAY,GACZtC,UAAW,GARD,E,iFAaZuC,YAAYC,KAAKP,SAAUO,KAAKzC,mB,+BAWhC,OACE,yBAAKU,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMX,OAAQ0C,KAAKL,MAAMG,WAAYvC,gBAAiByC,KAAKzC,gBAAiBC,UAAWwC,KAAKL,MAAMnC,iB,GA5BxFyC,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC,iB","file":"static/js/main.4d595b3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2d32cfee.svg\";","import React from 'react';\r\n\r\nconst Echo = (props) => {\r\n  const {\r\n    result,\r\n    refreshInterval,\r\n    nrRefresh } = props\r\n\r\n  return <div>\r\n    <p>Response from the Grand Echo service (page refreshed every {refreshInterval} milliseconds)</p>\r\n    <p>Number of refresh: <b>{nrRefresh}</b></p>\r\n    <p>Generated password: <b>{result.PASSWORD}</b></p>\r\n    <p>Generated passphrase: <b>{result.PASSPHRASE}</b></p>\r\n    <p>Radix Application: <b>{result.RADIX_APP}</b></p>\r\n    <p>Radix Component: <b>{result.RADIX_COMPONENT}</b></p>\r\n    <p>Radix Environment: <b>{result.RADIX_ENVIRONMENT}</b></p>\r\n    <p>Radix Host name: <b>{result.HOSTNAME}</b></p>\r\n    <p>Radix Host platform: <b>{result.HOSTPLATFORM}</b></p>\r\n  </div>\r\n}\r\n\r\nexport default Echo;","import React from 'react';\r\nimport logo from './logo.svg';\r\n\r\nconst Header = () => {\r\n  return <header className=\"App-header\">\r\n    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    <p>\r\n      Radix a PaaS built on Kubernetes\r\n    </p>\r\n    <div className=\"App-description\">\r\n    <br/>\r\n    Radix is an application platform built to increase development speed by providing  \r\n    <br />\r\n    the best possible tools to develop and run your applications.\r\n    </div>\r\n    <a\r\n      className=\"App-link\"\r\n      href=\"https://www.radix.equinor.com\"\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n    >\r\n      Learn more\r\n    </a>\r\n  </header>\r\n}\r\n\r\nexport default Header;","\r\nconst EchoService = (useMockData) => {\r\n  let fetch = loadDataFromApi;\r\n  if (useMockData) {\r\n    fetch = loadDataMock;\r\n  }\r\n  return {\r\n    fetch: fetch\r\n  };\r\n}\r\n\r\nconst loadDataMock = () => {  \r\n  return new Promise(function(resolve) {\r\n      const data = {\r\n        \"RADIX_APP\": \"app_name\",\r\n        \"RADIX_CLUSTERNAME\": \"dev-1\",\r\n        \"RADIX_COMPONENT\": \"echo\",\r\n        \"RADIX_ENVIRONMENT\": \"development\",\r\n        \"HOSTNAME\":\"my-computer\",\r\n        \"HOSTPLATFORM\":\"mac\",\r\n        \"PASSWORD\":\"random_password\",\r\n        \"PASSPHRASE\":\"random_passphrase\"\r\n      };\r\n      resolve(data)\r\n    })\r\n}\r\n\r\nconst loadDataFromApi = (path) => {\r\n  return fetch(path, getFetchInit()).then(result=> {return result.json()})\r\n}\r\n\r\n// disable cache on http requests\r\nconst getFetchInit = () => {\r\n  const myHeaders = new Headers();\r\n  myHeaders.append('pragma', 'no-cache');\r\n  myHeaders.append('cache-control', 'no-cache');\r\n  return {\r\n    method: 'GET',\r\n    headers: myHeaders,\r\n  };\r\n}\r\n\r\nexport default EchoService;","import React from 'react';\r\nimport Echo from './components/Echo';\r\nimport Header from './components/Header';\r\nimport EchoService from './services/Echo';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.refreshInterval = 1000;\r\n    this.useMockData = true;\r\n    \r\n    this.state ={\r\n      echoResult: {},\r\n      nrRefresh: 0\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    setInterval(this.loadData, this.refreshInterval) \r\n  }\r\n\r\n  loadData = () => {\r\n    const echoService = EchoService(this.useMockData)\r\n    const nrRefresh = this.state.nrRefresh + 1\r\n\r\n    echoService.fetch('/api/echo').then(data => this.setState({ echoResult: data, nrRefresh: nrRefresh}))\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Echo result={this.state.echoResult} refreshInterval={this.refreshInterval} nrRefresh={this.state.nrRefresh} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}